<documentation title="Function Comment">
    <standard>
        <![CDATA[
        Functions with void return type should not have @return tags, while all other functions must have explicit @return tags.
        ]]>
    </standard>
    <code_comparison>
        <code title="Valid: No @return for void function">
            <![CDATA[
/**
 * Process data without returning anything.
 *
 * @param <em>array $data</em> The data to process
 */
public function processData(array $data): <em>void</em>
{
    // Process data
}
            ]]>
        </code>
        <code title="Invalid: @return tag on void function">
            <![CDATA[
/**
 * Process data without returning anything.
 *
 * @param <em>array $data</em> The data to process
 * <em>@return void</em>
 */
public function processData(array $data): <em>void</em>
{
    // Process data
}
            ]]>
        </code>
    </code_comparison>
    <code_comparison>
        <code title="Valid: @return tag for non-void function">
            <![CDATA[
/**
 * Get formatted string.
 *
 * @param <em>string $input</em> The input string
 * <em>@return string</em>
 */
public function formatString(string $input): <em>string</em>
{
    return strtoupper($input);
}
            ]]>
        </code>
        <code title="Invalid: Missing @return tag">
            <![CDATA[
/**
 * Get formatted string.
 *
 * @param <em>string $input</em> The input string
 */
public function formatString(string $input): <em>string</em>
{
    return strtoupper($input);
}
            ]]>
        </code>
    </code_comparison>
    <standard>
        <![CDATA[
        This rule enforces:
        1. Functions with void return type must NOT have @return tags
        2. All other functions (string, int, array, object, etc.) MUST have @return tags
        3. Constructors (__construct) are exempt from @return requirements
        4. Both typed and untyped functions are checked
        5. Return type can be declared or inferred from function signature
        ]]>
    </standard>
</documentation>
