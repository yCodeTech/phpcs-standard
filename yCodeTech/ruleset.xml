<?xml version="1.0"?>

<!--
****************************************************************
*             _____           _    _____         _             *
*            /  __ \         | |  |_   _|       | |            *
*       _   _| /  \/ ___   __| | ___| | ___  ___| |__          *
*      | | | | |    / _ \ / _` |/ _ \ |/ _ \/ __| '_ \         *
*      | |_| | \__/\ (_) | (_| |  __/ |  __/ (__| | | |        *
*       \__, |\____/\___/ \__,_|\___\_/\___|\___|_| |_|        *
*        __/ |                         Coding Standards        *
*       |___/                                                  *
*                                                              *
*   yCodeTech's Coding Standards for PHP_CodeSniffer (PHPCS)   *
*                                                              *
*        **********************************************        *
*                                                              *
*   This standard enforces the following rules:                *
*                                                              *
*   - Use `bool` and `int` type names instead of `boolean`     *
*     and `integer` in all code contexts.                      *
*                                                              *
*   - Require 1 single empty line before `@return` tag.        *
*                                                              *
*   - Require 1 single space between all @-tags' elements      *
*     (type, variable, etc.).                                  *
*                                                              *
*   - Require a `@return` tag except when the return type is   *
*     `void`.                                                  *
*                                                              *
****************************************************************
-->


<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="yCodeTech" xsi:noNamespaceSchemaLocation="https://schema.phpcodesniffer.com/phpcs.xsd">

    <description>Custom PHPCS standard for yCodeTech with extended docblock rules</description>
    
    <!-- Show sniff codes -->
    <arg value="s"/>

    <!-- yCodeTech sniffs are included by default, so no need to include them here. -->

    <!-- Cherrypick sniffs from other standards. -->

    <!-- Include Generic Docblock sniff, and exclude specific violations. -->
    <rule ref="Generic.Commenting.DocComment">
        <!-- This is disabled because the indentation/spacing is fixed the yCodeTech standard. -->
        <exclude name="Generic.Commenting.DocComment.TagValueIndent"/>
        
        <!-- This is disabled because the it might interfere with yCodeTech's @return new line rules. So at the moment all non-param tags can be grouped with @param, but this may change in the future. -->
        <exclude name="Generic.Commenting.DocComment.NonParamGroup"/>

        <!-- Allow other @tags to be first in a docblock. -->
        <exclude name="Generic.Commenting.DocComment.ParamNotFirst"/>
    </rule>

    <!-- Line endings must be CRLF (\r\n) -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\r\n" />
        </properties>
    </rule>

    <!-- Type hints must be lowercase. -->
    <rule ref="Generic.PHP.LowerCaseType"/>

    <!-- Keywords must be lowercase. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>

    <!-- `true`, `false` and `null` constants must always be lowercase. -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- The code should use valid PHP syntax (ie. missing semicolons, etc.). -->
    <rule ref="Generic.PHP.Syntax"/>

    <!-- No superfluous (unnecessary) whitespace is allowed. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

    <!-- Duplicate return tags are not allowed. -->
    <rule ref="Squiz.Commenting.FunctionComment.DuplicateReturn"/>

    <!-- The type in the @return tag is missing. -->
    <rule ref="Squiz.Commenting.FunctionComment.MissingReturnType"/>

    <!-- Exception type missing for @throws tag. -->
    <rule ref="Squiz.Commenting.FunctionComment.InvalidThrows"/>

    <!-- Parameter type missing for @param tag. -->
    <rule ref="Squiz.Commenting.FunctionComment.MissingParamType"/>

    <!-- Parameter name (variable) missing for @param tag. -->
    <rule ref="Squiz.Commenting.FunctionComment.MissingParamName"/>

    <!-- @param name casing must match the variable name casing. -->
    <rule ref="Squiz.Commenting.FunctionComment.ParamNameNoCaseMatch"/>

    <!-- @param comments must start with a capital letter. -->
    <rule ref="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>

    <!-- @param tag missing for the function parameter. -->
    <rule ref="Squiz.Commenting.FunctionComment.MissingParamTag"/>

    <!-- Function docblock is missing. -->
    <rule ref="PEAR.Commenting.FunctionComment.Missing"/>
</ruleset>
